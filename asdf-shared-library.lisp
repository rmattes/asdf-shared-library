;;; -*- Mode: lisp -*-
;;;
;;; asdf-shared-library.lisp
;;;
;;; Copyright (C) 2016, Ralf Mattes <rm@mh.freiburg.de>
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

(in-package #:asdf-shared-library)

(defvar *compiler* "cc"
  "Default compiler to compile a shared library")

(defvar *cflags* #+linux "-fPIC -shared" #+darwin "-dynamiclib"
  "Default cflags to compile sources to a shared library")

(defvar *pkg-config-binary* "pkg-config"
  "Binary for pkg-config")

(defun run-pkgconfig (package what)
  (string-trim '(#\newline)
               (ecase what
                 (:cflags
                  (uiop:run-program (format nil "~A --cflags ~A" *pkg-config-binary* package)
                                    :output :string))
                 (:libs
                  (uiop:run-program (format nil "~A --libs ~A" *pkg-config-binary* package)
                                    :output :string)))))

(defun collect-pkg-config (packages what)
       (loop for package in packages
             collect (run-pkgconfig package what)))

(defclass shared-library (parent-component component)
  ((so-file-type :accessor so-file-type-of :initform
                 #+linux "so"
                 #+windows "dll"
                 #+darwin "dylib")
   (soures       :initarg  :sources         :accessor sources-of  :initform ())
   (cflags       :initarg  :cflags          :accessor cflags-of   :initform ())
   (libs         :initarg  :libs            :accessor libs-of     :initform ())
   (packages     :initarg  :packages        :accessor packages-of :initform ())
   )
  (:documentation
   "This ASDF component represent a shared library that will be
    loaded when the containing ASDF system gets loaded."))

;;; N.B.: for the next two classes it would be convenient to provide
;;; a default file type, but alas, that would trigger and error if a
;;; header and a c source have the same name-sans-type. Bummer.
(defclass c-source (static-file)
  ())

(defclass c-header (static-file)
  ())

;;; FIXME: this is wrong, shared-library oesn't have a source file type
(defmethod source-file-type ((component shared-library) system)
  (declare (ignore system))
  nil)

;;; A library has no pathname by itself so we reuse theparent's pathname
(defmethod component-pathname ((component shared-library))
  (component-pathname (component-parent component)))

;;; dependency traking
(defmethod component-depends-on ((op load-op) (component shared-library))
  `((compile-op ,component) ,@(call-next-method)))

;;; Returns a list of all files generated by applying the operation to
;;; the component
(defmethod output-files ((op compile-op) (component shared-library))
  (let   ((libfile (make-pathname :name (component-name component)
                                  :type (so-file-type-of component)
                                  :defaults (component-pathname (component-parent component)))))
    (format *standard-output* "~%; Output library as ~A~&" (apply-output-translations libfile))
    (list libfile)))

;;; FIXME: this is wrong - we only need to filter out header files for
;;; compilation, NOT for depenency tracking.
(defmethod input-files ((op compile-op) (component shared-library))
  (loop for child in (component-children component)
        if (typep child 'c-source)
        collect (component-pathname child)))

(defmethod perform ((op prepare-op) (component shared-library))
  (values))

;;; FIXME: missing applicationof extra compiler options
(defmethod perform ((op compile-op) (component shared-library))
  (let* ((package-cflags  (collect-pkg-config (packages-of component) :cflags))
         (package-ldflags (collect-pkg-config (packages-of component) :libs)))
    (uiop:run-program (format nil "~A ~A ~{~A ~} ~{~A ~} ~{~A ~} -o ~A" *compiler* *cflags*
                              package-cflags package-ldflags
                              (input-files 'compile-op component)
                              (car (output-files 'compile-op component)))
                     :output *standard-output*
                     :error-output *standard-output*)))

(defmethod perform ((op load-op) (component shared-library)                 )
  (let ((libfile (car (output-files 'compile-op component))))
   (cffi:load-foreign-library libfile)
   (format *standard-output* "; Loading shared library \"~A\"~&" libfile)))


;; Allow for naked :grovel-file and :wrapper-file in asdf definitions.
;;; Register our component classes with asdf so we can use "naked"
;;; :shared-library and : c-source components in system definitions
(setf (find-class 'asdf::shared-library) (find-class 'shared-library))
(setf (find-class 'asdf::c-source) (find-class 'c-source))
(setf (find-class 'asdf::c-header) (find-class 'c-header))
